@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html>
<head>
    <!-- Use Unicode character encoding - multi-language compatibility -->
    <meta charset="utf-8">

    <!-- Set the initial view zooming scale for mobile device -->
    <meta name="viewport" content="width = device-width,initial-scale = 1"/>


    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

    <link rel="stylesheet" type="text/css" href="~/css/homepage.css">

    <script src="//cdnjs.cloudflare.com/ajax/libs/annyang/2.6.0/annyang.min.js"></script>


    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

    <!-- Bootstrap JavaScript (Popper.js is required for dropdowns) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    @{
        // Check if Context and Session are not null
        var fontSize = Context?.Session?.GetInt32("FontSize") ?? 20;
    }

    <style>
        body {
            font-size: @(fontSize)px;
        }
    </style>
</head>
<body>
    <style>
        .center-div {
            display: none;
            position: fixed;
            top: 55%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
            z-index: 1001;
            color: #333;
            max-height: 70vh;
            max-width: 80vw;
            overflow-y: auto;
        }
    </style>

    <!-- Add an overlay div -->
    <div id="overlay"></div>

    <!-- Center div -->
    <div id="centerDiv" class="center-div enlarged-text" role="dialog" aria-labelledby="accessibilityMode" aria-describedby="tutorialContent">
        <span class="close" onclick="closeCenterDiv()">&times;</span>
        <h1 id="accessibilityMode" style="font-size: 1.6em">Accessibility Mode</h1>
        <div id="tutorialContent" style="font-size: 1.6em" aria-live="assertive">

        </div>
        <div class="buttons">
            <button  type="button" class="btn btn-secondary" id="cancelButton">Cancel</button>
            <button  type="button" class="btn btn-primary" id="skipButton">Skip</button>
            <button  type="button" class="btn btn-success" id="nextButton">Next</button>
        </div>
    </div>

    <header>
        <partial name="Navbar"/>
    </header>

    <div class="imagetext">
        <div class="blur">
            <img src="~/img/home_img.jpg" alt="Image" />
            <div class="text"><b>Welcome to OCBC</b></div>
        </div>
    </div>
    <fieldset class="FormContent">
        <legend></legend>
        <div class="flex">
            <div class="flex-column">
                <p class="search-text"><b>Banking for Individual</b></p>
                <li class="flex-item"><a href="#">FRANK by OCBC</a></li>
                <li class="flex-item"><a href="#">Personal Banking</a></li>
                <li class="flex-item"><a href="#">Premier Banking</a></li>
                <li class="flex-item"><a href="#">Premier Private Client</a></li>
            </div>
            <div class="flex-column">
                <p class="search-text"><b>Banking for Businesses</b></p>
                <li class="flex-item"><a href="#">Business Banking</a></li>
                <li class="flex-item"><a href="#">Large Corporates</a></li>
            </div>
            <div class="flex-column">
                <p class="search-text"><b>OCBC Group</b></p>
                <li class="flex-item"><a href="#">About us</a></li>
                <li class="flex-item"><a href="#">Sustainability</a></li>
                <li class="flex-item"><a href="#">Careers</a></li>
                <li class="flex-item"><a href="#">Investors</a></li>
            </div>
        </div>
    </fieldset>



    <script>
    var activateCount = localStorage.getItem("activateCount");
    document.addEventListener("DOMContentLoaded", function () {
        // Check if the modal should be shown
        var shouldShowModal = sessionStorage.getItem("showModal");

        if (!shouldShowModal) {
            openCenterDiv();
            // Set the flag to indicate that the modal has been shown
            sessionStorage.setItem("showModal", "true");
        }
        document.getElementById('accessibilityMode').focus();

        var storedStatus = sessionStorage.getItem("annyangStatus");

        activateCount = 0;

        document.getElementById('skipButton').style.display = 'none';
    });

    // Variable to keep track of the current tutorial step
    var currentStep = 1;

    // Function to update tutorial content for different steps
        function updateTutorialContent() {
            var tutorialContent = document.getElementById("tutorialContent");

            // Check the current step and update content accordingly
            switch (currentStep) {
                case 1:
                    tutorialContent.innerHTML = `<h2>Do you know how to use our voice recognition?</h2>`;
                    cancelButton.textContent = "Yes";
                    nextButton.textContent = "No";
                    cancelButton.removeEventListener('click', previousTutorialStep);
                    cancelButton.addEventListener('click', close);   //before activation we have cancel button
                    break;
                case 2:
                    tutorialContent.innerHTML = `<h2>Tutorial Step 1: Hold control key to activate voice recognition,
                                    say 'Next' and release control key to go to next step.</h2>`;
                    cancelButton.textContent = "Previous";
                    nextButton.textContent = "Next";
                    cancelButton.removeEventListener('click', close);
                    cancelButton.addEventListener('click', previousTutorialStep); //in tutorial we only have previous button
                    break;


                case 3:
                    tutorialContent.innerHTML = `<h2>Step 2: Say "Search" to focus on search bar. And say 'Type In' followed by your input to enter your information verbally.
                                     Try it out in next page.</h2>
                              `;
                    cancelButton.textContent = "Previous";
                    nextButton.textContent = "Next";
                    cancelButton.removeEventListener('click', close);
                    cancelButton.addEventListener('click', previousTutorialStep);
                    break;
                case 4:
                    tutorialContent.innerHTML = `Step 2: Focus on search bar. Say "type in" to enter information.
                                             <div class="search-wrapper">
                                    <i class="search-icon bx bx-search"></i>
                                    <input type="search" id="searchDemo" data-search placeholder="Search">
                                </div>
                              `;
                    document.getElementById("tutsearch").style.display = "block";
                    cancelButton.textContent = "Previous";
                    nextButton.textContent = "Next";
                    cancelButton.removeEventListener('click', close);
                    cancelButton.addEventListener('click', previousTutorialStep);
                    break;
                case 5:
                    tutorialContent.innerHTML = `<p>Step 4: To navigate to different pages, use voice commands starting with 'Go to.'
                            For example, 'Go to login page'. The system also may provide suggestion for you based on your inacurate voice command.</p>`;
                    cancelButton.textContent = "Previous";
                    nextButton.textContent = "Close";
                    cancelButton.removeEventListener('click', close);
                    cancelButton.addEventListener('click', previousTutorialStep);
                    break;
            }
        }

    function openCenterDiv() {
        var overlay = document.getElementById("overlay");
        var centerDiv = document.getElementById("centerDiv");
        if (overlay && centerDiv) {
            overlay.style.display = "block";
            centerDiv.style.display = "block";
            document.body.style.overflow = "hidden"; // Disable scrolling
            updateTutorialContent(); // Update content when opening the modal
        }
    }

    function closeCenterDiv() {
        var overlay = document.getElementById("overlay");
        var centerDiv = document.getElementById("centerDiv");
        if (overlay && centerDiv) {
            overlay.style.display = "none";
            centerDiv.style.display = "none";
            document.body.style.overflow = ""; // Enable scrolling
        }
    }

    function nextTutorialStep() {
        // Increment the current step
        currentStep++;
        if (currentStep === 6) {
            close();
        }

        // Update the tutorial content for the new step
        updateTutorialContent();
        updateFontSizeBasedOnEnlargedText();
    }

    function previousTutorialStep() {
        // Decrement the current step
        currentStep--;

        if (currentStep === 0) {
            close();
        }

        // Update the tutorial content for the new step
        updateTutorialContent();
    }

    function updateFontSizeBasedOnEnlargedText() {
        const tutorialContentElement = document.getElementById('tutorialContent');
        const isEnlargedPage = document.body.classList.contains('enlarged-page');
        const isEnlargedText = document.body.classList.contains('enlarged-text');

        if (tutorialContentElement && isEnlargedPage && isEnlargedText) {
            tutorialContentElement.style.fontSize = '1.2em';
        }
    }

    function updateFontSize(size) {
        $.ajax({
            url: '/Home/UpdateFontSizeJS',
            type: 'POST',
            data: { size: size },
            success: function (data) {
                // Optionally handle the response from the server
                console.log('Font size updated successfully');
            },
            error: function (error) {
                console.error('Error updating font size:', error);
            }
        });
    }

    document.getElementById('cancelButton').addEventListener('click', close);

        



    function close() {
        // code for canceling activation
        closeCenterDiv();
        documentgetElementById('centerDiv').style.display = 'none';
    }

    // Add another event listener to the "Activate" button for the second action (proceed to the next step)
    document.getElementById('nextButton').addEventListener('click', function () {
        if (currentStep === 1) {
            document.getElementById('skipButton').style.display = "block";
            nextTutorialStep();
        } else if (currentStep === 2 && activateCount >= 1) {
            nextTutorialStep();
        }
        else if (currentStep === 2 && activateCount < 1){
                speakResponse("Please hold shift key and say next to go to next step.");
        }
        else if (currentStep === 3) {
            nextTutorialStep()

        }
        else if (currentStep === 4) {
            const searchDemoValue = document.getElementById('searchDemo').value.trim();
            if (searchDemoValue !== '') {
                nextTutorialStep();
            }
            else {
                speakResponse("Please enter something into search bar.");
            }
        }
        else if (currentStep === 5) {
            nextTutorialStep();
        }
    });

    document.getElementById('skipButton').addEventListener('click', close);

    document.addEventListener("keydown", function (event) {
        // Check if centerDiv exists
        var centralDiv = document.getElementById("centerDiv");
        if (!centerDiv) {
            return;
        }

        if (event.key === "N" && event.shiftKey && document.activeElement.tagName !== "INPUT") {
            if (currentStep === 1) {
                activateAccessibility();
                nextTutorialStep();
                document.getElementById("skipButton").style.display = "block";
            } else if (currentStep === 2 && activateCount >= 1) {
                nextTutorialStep();
            }
            else if (currentStep === 2 && activateCount < 1) {
                speakResponse("Please hold shift key and say next to go to next step.");
            }
            else if (currentStep === 4) {
                    const searchDemoInput = document.getElementById('searchDemo');
                    const searchDemoValue = searchDemoInput.value.trim();

                    searchDemoInput.addEventListener('keydown', function (event) {
                        if (event.key === 'Enter') {
                            if (document.activeElement === searchDemoInput && searchDemoValue !== '') {
                                nextTutorialStep();
                            } else {
                                speakResponse("Please enter something into the search bar.");
                            }
                        }
                    });

                    if (searchDemoValue !== '') {
                        nextTutorialStep();
                    } else {
                        speakResponse("Please enter something into the search bar.");
                    }
            }
            else if (currentStep === 5) {
                nextTutorialStep();
            }
            else if (currentStep === 6) {
                nextTutorialStep();
            }
        }
        else if (event.key === "B" && event.shiftKey && document.activeElement.tagName !== "INPUT") {
            previousTutorialStep();
        }



    });
    </script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="~/js/annyang-setup.js" asp-append-version="true"></script>
</body>
</html>


<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,1,0" />

    <style>

        

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Poppins", sans-serif;
        }

        .chatbot-toggler {
            position: fixed;
            bottom: 30px;
            right: 35px;
            outline: none;
            border: none;
            height: 50px;
            width: 50px;
            display: flex;
            cursor: pointer;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background: #724ae8;
            transition: all 0.2s ease;
        }

        body.show-chatbot .chatbot-toggler {
            transform: rotate(90deg);
        }

        .chatbot-toggler span {
            color: #fff;
            position: absolute;
        }

            .chatbot-toggler span:last-child,
            body.show-chatbot .chatbot-toggler span:first-child {
                opacity: 0;
            }

        body.show-chatbot .chatbot-toggler span:last-child {
            opacity: 1;
        }

        .chatbot {
            position: fixed;
            right: 35px;
            bottom: 90px;
            width: 420px;
            background: #fff;
            border-radius: 15px;
            overflow: hidden;
            opacity: 0;
            pointer-events: none;
            transform: scale(0.5);
            transform-origin: bottom right;
            box-shadow: 0 0 128px 0 rgba(0, 0, 0, 0.1), 0 32px 64px -48px rgba(0, 0, 0, 0.5);
            transition: all 0.1s ease;
        }

        body.show-chatbot .chatbot {
            opacity: 1;
            pointer-events: auto;
            transform: scale(1);
        }

        .chatbot header {
            padding: 16px 0;
            position: relative;
            text-align: center;
            color: #fff;
            background: #724ae8;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

            .chatbot header span {
                position: absolute;
                right: 15px;
                top: 50%;
                display: none;
                cursor: pointer;
                transform: translateY(-50%);
            }

        header h2 {
            font-size: 1.4rem;
        }

        .chatbot .chatbox {
            overflow-y: auto;
            height: 350px;
            padding: 30px 20px 60px;
        }

        .chatbot :where(.chatbox, textarea)::-webkit-scrollbar {
            width: 6px;
        }

        .chatbot :where(.chatbox, textarea)::-webkit-scrollbar-track {
            background: #fff;
            border-radius: 25px;
        }

        .chatbot :where(.chatbox, textarea)::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 25px;
        }

        .chatbox .chat {
            display: flex;
            list-style: none;
        }

        .chatbox .outgoing {
            margin: 20px 0;
            justify-content: flex-end;
        }

        .chatbox {
            overflow-y: auto;
            height: 250px;
            padding: 100px 20px 20px; 
        }

            .chatbox .incoming span {
                width: 32px;
                height: 32px;
                color: #fff;
                cursor: default;
                text-align: center;
                line-height: 32px;
                align-self: flex-start;
                background: #724ae8;
                border-radius: 4px;
                margin: 0 10px 7px 0;
            }

            .chatbox .chat p {
                white-space: pre-wrap;
                padding: 12px 16px;
                border-radius: 10px 10px 0 10px;
                max-width: 75%;
                color: #000000;
                font-size: 1rem; 
                background: #ececec;
            }


        .chat-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .voice-command-btn,
        .keyboard-shortcut-btn {
            padding: 5px 12px;
            background-color: #724ae8;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        
        .voice-command-btn {
            margin-right: 8px; 
        }

            .voice-command-btn:hover,
            .keyboard-shortcut-btn:hover {
                background-color: #94bdfa;
            }

        .chatbox .incoming span {
            width: 32px;
            height: 32px;
            color: #fff;
            cursor: default;
            text-align: center;
            line-height: 32px;
            align-self: flex-start;
            background: #724ae8;
            border-radius: 4px;
            margin-top: 30px;
        }

        .chatbox .incoming p {
            padding: 12px 16px;
            border-radius: 10px 10px 0 10px;
            max-width: 75%;
            color: #000000;
            font-size: 0.95rem;
            background: #ececec;
            margin-top: 30px; 
        }

        .chatbox .incoming .generated-textbox {
            font-size: 1.5rem; 
            text-align: left;
        }
    </style>
    
</head>
<body>
    <button class="chatbot-toggler">
        <span class="material-symbols-rounded">mode_comment</span>
        <span class="material-symbols-outlined">close</span>
    </button>
    <div class="chatbot">
        <header>
            <h2>Chatbot</h2>
            <span class="close-btn material-symbols-outlined">close</span>
        </header>
        <ul class="chatbox">
            <li class="chat incoming">
                <span class="material-symbols-outlined">smart_toy</span>
                <p>Hi there 👋<br>How can I help you today?</p>
            </li>
            
            <li class="chat incoming" id="buttons-container">
                <div class="chat-buttons">
                    <button class="voice-command-btn">Voice Commands</button>
                    <button class="keyboard-shortcut-btn">Keyboard Shortcuts</button>
                </div>
            </li>
        </ul>
    </div>

    <script>
        
        const chatbotToggler = document.querySelector(".chatbot-toggler");
        const closeBtn = document.querySelector(".close-btn");
        const chatbox = document.querySelector(".chatbox");
        const voiceCommandBtn = document.querySelector(".voice-command-btn");
        const keyboardShortcutBtn = document.querySelector(".keyboard-shortcut-btn");

        const createChatLi = (message, className) => {
            const chatLi = document.createElement("li");
            chatLi.classList.add("chat", `${className}`);
            
            let chatContent = className === "outgoing" ? `<p class="generated-textbox"></p>` : `<span class="material-symbols-outlined">smart_toy</span><p class="generated-textbox"></p>`;
            chatLi.innerHTML = chatContent;
            chatLi.querySelector(".generated-textbox").innerHTML = message; 
            return chatLi;
        }

        const handleButtonClick = (buttonType) => {
            const existingVoiceCommandList = document.querySelector(".voice-command-list");
            const existingKeyboardShortcutList = document.querySelector(".keyboard-shortcut-list");

            if (existingVoiceCommandList) {
                existingVoiceCommandList.remove();
            }

            if (existingKeyboardShortcutList) {
                existingKeyboardShortcutList.remove();
            }

            if (buttonType === "voice-command") {
                const voiceCommands = `
1.Go to login page - Brings you to login page

2.Go to home page - Brings you to Home page

3.Go to card activation - Brings you to card activation page

4.Access code (Code) - Enter your Access code

5.Pin number (PIN) - Enter your Pin number

6.Login - Logs you in

7.Logout - Logs you out

8.Search - Brings you to search feature

9.Type in - Types in what you say

10.Go to payment page - Brings you to the payment page

11.Enter - Enters your search

12.Next - Clicks the next button for you

13.Skip - Clicks the skip button for you

14.Increase font size - Increases font size

15.Decrease font size - Decreases font size

16.Toggle dark mode - Enables dark mode

17.Help - clicks on chatbot

18.Voice command - displays the voice commands

19.Keyboard - displays keyboard shortcuts

                      `;
                const chatLi = createChatLi(voiceCommands, "incoming");
                chatLi.classList.add("voice-command-list");
                chatbox.appendChild(chatLi);
                addButtons();
            } else if (buttonType === "keyboard-shortcut") {
                const keyboardShortcutMessage = "Hold Control_ Activate voice recognition";
                const chatLi = createChatLi(keyboardShortcutMessage, "incoming");
                chatLi.classList.add("keyboard-shortcut-list");
                chatbox.appendChild(chatLi);
                addButtons();
            }

            
            chatbox.scrollTop = chatbox.scrollHeight;
        }

        const addButtons = () => {
            const buttonsContainer = document.querySelector(".chatbox");
            if (buttonsContainer) {
                
                const existingButtons = document.querySelector(".chat-buttons");
                if (existingButtons) {
                    existingButtons.remove();
                }

                const chatButtons = document.createElement("div");
                chatButtons.classList.add("chat-buttons");
                chatButtons.innerHTML = `
                      <button class="voice-command-btn">Voice Commands</button>
                      <button class="keyboard-shortcut-btn">Keyboard Shortcuts</button>
                    `;
                buttonsContainer.appendChild(chatButtons);
            }
        }

        document.addEventListener("click", (event) => {
            const target = event.target;
            if (target.classList.contains("voice-command-btn")) {
                handleButtonClick("voice-command");
            } else if (target.classList.contains("keyboard-shortcut-btn")) {
                handleButtonClick("keyboard-shortcut");
            }
        });

        closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));
        chatbotToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));
    </script>
</body>
</html>