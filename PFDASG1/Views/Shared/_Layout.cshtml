<!DOCTYPE html>
<html>
<head>
    <style>
        .animated-button {
            position: fixed;
            bottom: 20px;
            left: 30px;
            z-index: 1000;
            transition: transform 0.2s ease-in-out;
            color: red !important;
            font-weight: bold;
            background-color: #f3f3f3;
        }

            .animated-button:hover {
                transform: scale(1.1);
                color: #f3f3f3 !important;
                font-weight: bold;
                background-color: red;
            }

        /* Hide the default button styles */
        .btn-toggle {
            position: relative;
            width: 60px;
            height: 30px;
            border-radius: 15px;
            background-color: #ccc;
            cursor: pointer;
        }

        /* Style the inner circle */
        .btn-toggle:before {
            content: '';
            position: absolute;
            top: 2px;
            left: 2px;
            width: 26px;
            height: 26px;
            border-radius: 50%;
            background-color: #fff;
            transition: transform 0.3s ease;
        }

        /* Move the inner circle to the right when button is active */
        .btn-toggle.active:before {
            transform: translateX(30px);
        }

        /* Hide the button text */
        .btn-toggle span {
            visibility: hidden;
        }

        /* Show the button text only for accessibility */
        .btn-toggle span {
            visibility: visible;
        }

        .dark-mode {
            background-color: #3f3f3f; /* Dark background color */
            color: #ffffff; /* Light text color */
        }

            .dark-mode .form {
                background-color: #545454; /* Dark background color for forms in dark mode */
            }

            

            .dark-mode .div {
                background-color: #545454; /* Dark background color for popups in dark mode */
            }

            .dark-mode label {
                color: #ffffff; /* Light text color for labels in dark mode */
            }


            .dark-mode .navbar-nav .nav-link {
                /*background-color: #1e1e1e;*/
                color: #ffffff; /* Light text color for navbar links in dark mode */
            }

            /* Style for dropdown menu items */
            .dark-mode .dropdown-menu{
                color: #ffffff; /* Light text color for dropdown menu items in dark mode */
            }
            .dark-mode .dropdown-item{
                color: #ffffff;
            }

             
        

            /* Additional styles for dropdown menu background */
            .dark-mode .dropdown-menu {
                background-color: #545454; /* Dark background color for dropdown menu in dark mode */
            }

            


            .dark-mode input[type="text"],
            .dark-mode input[type="password"],
            .dark-mode input[type="email"],
            .dark-mode textarea {
                background-color: #3f3f3f; /* Dark background color for input fields in dark mode */
                color: #ffffff; /* Light text color for input fields in dark mode */
                border-color: #555555; /* Border color for input fields in dark mode */
            }
            
            .dark-mode .modal-content {
                background-color: #545454; /* Dark background color for modal content */
                color: #ffffff; /* Light text color for modal content */
            }

            .dark-mode .modal-header {
                border-bottom: 1px solid #555555; /* Border color for modal header in dark mode */
            }

            .dark-mode .transfer-form {
                background-color: #545454; /* Dark background color for the form */
                color: #ffffff; /* Light text color for the form */
            }

            .dark-mode .modal-footer {
                border-top: 1px solid #555555; /* Border color for modal footer in dark mode */
            }

            .dark-mode ::placeholder,
            .dark-mode select::placeholder {
                color: #ffffff; /* White color for placeholder text in dark mode */
            }

            
            .dark-mode .cardactivationtext{
                color: #ffffff;
                background-color: #545454;
            }
            .dark-mode .checkout{
                background-color: #545454;
            }

            .dark-mode #search {
                background-color: #545454;
                color: #ffffff;
            }
            .dark-mode .search-text{
                color: #545454;
            }
            
            .dark-mode .widget{
                border: 2px solid #ffffff;
            }

    </style>
</head>

<body>
    @RenderBody()

    <!-- Add this button wherever you want in your layout -->
@*    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#fontSizeModal">
        Adjust Font Size
    </button>*@
    <button type="button" class="btn btn-outline-primary animated-button" data-bs-toggle="modal" data-bs-target="#fontSizeModal">
        Adjust Display
    </button>

    <!-- Bootstrap Modal for Font Size Adjustment -->
    <div class="modal fade" id="fontSizeModal" tabindex="-1" role="dialog" aria-labelledby="fontSizeModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="fontSizeModalLabel">Adjust Display</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Add form elements for font size adjustment -->
                    <form id="fontSizeForm" action="@Url.Action("AdjustFontSize", "Home")" method="post">
                        <label for="fontSize">Select Font Size:</label>
                        <div class="input-group">
                            <button type="button" class="btn btn-secondary" aria-label="Decrease Font Size" style="margin:5px" onclick="adjustFontSize(-1)">
                                <span aria-hidden="true">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-dash" viewBox="0 0 20 20">
                                        <path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8" />
                                    </svg>
                                </span>
                            </button>
                            <input type="number" name="size" id="fontSize" min="15" max="30" value="20" style="text-align: center;" />
                            <button type="button" class="btn btn-secondary" aria-label="Increase Font Size" style="margin:5px" onclick="adjustFontSize(1)">
                                <span aria-hidden="true">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-plus" viewBox="0 0 20 20">
                                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                                    </svg>
                                </span>
                            </button>
                        </div>
                        <span>Toggle Dark Mode</span>
                        <br />
                        @*<button type="submit" class="btn btn-primary">Apply</button>*@
                        <button type="button" class="btn-toggle slider" onclick="toggleDarkMode()">
                            
                        </button>

                        <div id="fontSizeLiveRegion" aria-live="assertive" class="visually-hidden"></div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <script>
        // Function to adjust font size
        function adjustFontSize(change) {
            var elementsToAdjust = document.querySelectorAll("body, input, select, textarea, form, label, p, h4, option");

            elementsToAdjust.forEach(function (element) {
                var computedStyle = window.getComputedStyle(element);
                var currentSize = parseFloat(computedStyle.getPropertyValue('font-size'));

                // Ensure the new size is within the specified range
                var newSize = Math.min(30, Math.max(15, currentSize + change));

                // Update the font size of the element
                element.style.fontSize = newSize + "px";
            });

            // Update the font size in the font size input
            var fontSizeInput = document.getElementById("fontSize");
            var currentSize = parseInt(fontSizeInput.value);
            var newSize = Math.min(30, Math.max(15, currentSize + change));
            fontSizeInput.value = newSize;

            // Update the live region with the new font size
            document.getElementById("fontSizeLiveRegion").textContent = newSize;

            // Store the new font size setting in sessionStorage
            sessionStorage.setItem("fontSizeSetting", newSize);
        }

        // Function to apply font size setting from sessionStorage
        function applyFontSizeSetting() {
            var fontSizeSetting = sessionStorage.getItem("fontSizeSetting");
            if (fontSizeSetting) {
                adjustFontSize(fontSizeSetting - 20); // Adjust font size based on the stored setting
            }
        }

        // Apply font size setting when the page loads
        window.addEventListener("load", applyFontSizeSetting);



        document.addEventListener("DOMContentLoaded", function () {
            // Check if the theme setting is stored in sessionStorage
            var currentTheme = sessionStorage.getItem("themeSetting");

            // If a theme setting was previously stored, apply it
            if (currentTheme === "dark") {
                var body = document.body;
                body.classList.add("dark-mode");
                var button = document.querySelector('.btn-toggle');
                button.classList.add('active');
            }
        });

        function toggleDarkMode() {
            var body = document.body;
            var currentTheme = body.classList.contains("dark-mode") ? "light" : "dark";

            // Toggle dark mode class on body
            body.classList.toggle("dark-mode");

            // Store the current theme setting in sessionStorage
            sessionStorage.setItem("themeSetting", currentTheme);
            var button = document.querySelector('.btn-toggle');
            button.classList.toggle('active');
        }

        // Function to apply dark mode setting from sessionStorage
        function applyThemeSetting() {
            var body = document.body;
            var themeSetting = sessionStorage.getItem("themeSetting");

            // Check if a theme setting is stored
            if (themeSetting) {
                // Apply dark mode if the stored setting is dark
                if (themeSetting === "dark") {
                    body.classList.add("dark-mode");
                }
            }
        }

        // Apply theme setting when the page loads
        window.addEventListener("load", applyThemeSetting);
    </script>

</body>
</html>