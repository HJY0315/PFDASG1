@model PFDASG1.Models.TransactionViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!--1. Make the Done button transfer page to HomePage. (Done)
    2. Ensure that the prev button in working condition. (On Hold)
    3. Display Remaining Balance. (Done)
    4. Ensure that the Remaining Balance is linked to the acct balance. (Done)
    5. Display Daily Limit. (Done)
    6. Ensure that the Daily limit is linked the the transaction amount history.
    7. Done
-->


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OCBC - Transfer</title>
    <link rel="stylesheet" type="text/css" href="~/css/transfer.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

    @{
        // Check if Context and Session are not null
        var fontSize = Context?.Session?.GetInt32("FontSize") ?? 20;
    }

    <style>
        body {
            font-size: @(fontSize)px;
        }
    </style>
</head>

<body>
    <header>

        <partial name="_navbar" />
    </header>
    <div class="transfer-form container mt-5">
        <form asp-controller="VisuallyImpaired" asp-action="Transfer" method="post">
            <div class="form-step-list">               
                <div class="form-step-item text-center">
                    <span class="item__step">1</span>
                    <p class="item__title mt-1">Search Recipient</p>
                </div>
                <div class="form-step-item text-center">
                    <span class="item__step">2</span>
                    <p class="item__title mt-1">Enter Amount</p>
                </div>
                <div class="form-step-item text-right">
                    <span class="item__step">3</span>
                    <p class="item__title mt-1">Review</p>
                </div>
            </div>
            
            <div class="form-layout">
                <!-- Step 1: Enter phone number -->
                <div class="form-group step-content">
                <div class="form-group" id="mobileInput">
                    <label asp-for="phoneNumber"></label>
                    <input asp-for="phoneNumber" type="text" id="mobileNumber" placeholder="Enter Mobile Number" maxlength="8" />
                    <span asp-validation-for="phoneNumber" class="text-danger" id="phoneNo"></span>
                        <p>Transfer to: <span id="reviewTransferTo">@Model.receipient</span></p>
                        <table id="recipientTable" class="table">
                            <thead id="tableHeader" hidden>
                                <tr>
                                    <th>Name</th>
                                    <th>Phone Number</th>
                                </tr>
                            </thead>
                            <tbody id="recipientTableBody">
                            </tbody>
                        </table>
                </div>
                </div>
                <!-- Step 2: Enter Amount -->
                <div class="form-group step-content">
                    <label asp-for="Amount">Enter your Amount</label>
                    <input type="number" id="amount" asp-for="Amount" required min="1" />
                    <span asp-validation-for="Amount" class="text-danger" id="amountMsg"></span>

                    <!-- Display Remaining Balance -->
                    <label>Remaining Balance:</label>
                   <!-- <select>
                        <option>Transfer From</option>
                        <option>Saving Account</option>
                        <option>Checking Account</option>
                    </select>-->
                    <p>$@ViewBag.totalBalance</p>

                    <label>Daily Limit:</label>
                    <p>$@ViewBag.DailyLimit</p>

                    <label asp-for="Description">Description</label>
                    <input type="text" id="description" asp-for="Description" />
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <!-- Step 3: Confirmation -->
                <div class="form-group step-content">
                    <img src="../img/checked.png" width="150" height="150" />
                    <p>Amount: <span id="reviewAmount">@Html.DisplayFor(model => model.Amount)</span></p>
                    <p>Transfer to: <span id="reviewTransferTo">@ViewData["ReceipientName"]</span></p>
                    <p>Description: <span id="reviewDescription">@Model.Description</span></p>
                </div>
            </div>

        <!-- Next and Previous Buttons -->
        <div class="form-navigation mt-5">
            <button class="btn btn-primary" id="prevButton" onclick="nextPrev(-1)">Previous</button>
            <button class="btn btn-primary" id="nextButton" onclick="nextPrev(0)">Next</button>
        </div>
        </form>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/annyang/2.6.0/annyang.min.js"></script>
    <script>
        let currentStep = 0;
        const formSteps = document.querySelectorAll('.form-step-item');
        const formContents = document.querySelectorAll('.form-group.step-content');

        setTimeout(function () {
            $('#mobileNumber').focus();
        }, 500);

        function showStep(stepIndex) {
            formSteps.forEach((step, index) => {
                step.classList.toggle('active', index === stepIndex);
            });

            formContents.forEach((content, index) => {
                const isCurrentStep = index === stepIndex;
                content.classList.toggle('active', isCurrentStep);

                // Hide or show the content based on the current step
                if (isCurrentStep) {
                    content.style.display = 'block';
                } else {
                    content.style.display = 'none';
                }
            });

            //updateReviewContent();
        }



        let isPhoneNumberValid = false;

        function phoneNumberValidation() {
            const phoneNumber = document.getElementById('mobileNumber').value;

            return new Promise((resolve, reject) => {
                $.ajax({
                    type: 'GET',
                    url: '/VisuallyImpaired/PhoneNumberValidation',
                    data: { phoneNumber: phoneNumber },
                    success: function (data) {
                        if (data === null) {
                            document.getElementById('phoneNo').innerHTML = 'Invalid phone number';
                            reject('Invalid phone number');
                        } else if (data === "Logged in User") {
                            document.getElementById('phoneNo').innerHTML = 'Transfer to own account is not supported';
                            reject('Transfer to own account');
                        } else {
                            document.getElementById('phoneNo').innerHTML = '';
                            resolve(true);  // Phone number is valid
                        }
                    },
                    error: function (error) {
                        console.error('Error:', error.responseText);
                        document.getElementById('phoneNo').innerHTML = 'Error validating phone number.';
                        reject('Error validating phone number');
                    }
                });
            });
        }

        function inputValidation() {
            // Get the parent div element by its class name
            var formGroup = document.querySelector('.step-content');

            // Get all span elements within the parent div
            var spanElements = formGroup.querySelectorAll('span.text-danger');

            var isValid = true;

            const formContent = document.querySelector('.form-group.step-content[style="display: block;"]');

            // Loop through each span element to get the asp-validation-for attribute value
            spanElements.forEach(function (span) {
                var innerSpanValue = span.getAttribute('id');
                var input = span.previousElementSibling;
                if (input && input.tagName.toLowerCase() === 'input') {
                    var inputValue = input.value.trim(); // Get the value of the input
                    console.log('inside input')
                    //if the page is at the phone number page
                    if (formContent.querySelector('#mobileNumber')) {
                        if (inputValue.length !== 8) { //check if the phone number input have 8 digit
                            span.innerHTML = 'Please enter an 8-digit phone number!'; //update error message
                            isValid = false; //false so that it wont go to next page
                        }
                    }
                }
            })

            return isValid;
        }


        function getDescriptionText(bankTransfer, paymentType) {
            // Customize this function based on your requirements
            return 'Payment for ' + getTransferToText(bankTransfer, paymentType);
        }


        function speakConfirmation() {
            const msg = new SpeechSynthesisUtterance('Transfer confirmed!');
            window.speechSynthesis.speak(msg);
        }

        function speakAmountError() {
            const msg = new SpeechSynthesisUtterance('Your account have insufficient balance');
            window.speechSynthesis.speak(msg);
        }

        let currentPage = 1;

        function nextPrev(n) {
            // Update the current page based on the navigation
            currentPage += n;
            console.log(currentPage)
            // Perform your page navigation logic here


            phoneNumberValidation().then(function () {
                isPhoneNumberValid = true;
            }).catch(function (error) {
                isPhoneNumberValid = false;
                console.log('Error:', error);
            });

            if (currentPage === 1) {
                console.log('1');
                var isValidInput = inputValidation();
                if (isValidInput) {
                    phoneNumberValidation().then(function () {
                        console.log('inside');
                        var amountInput = document.getElementById('amount');
                        amountInput.value = '1';
                        // Change the button text to "Confirm"
                        document.getElementById('nextButton').innerText = 'Confirm';
                        // Update the onclick event to call the speakConfirmation function
                        //document.getElementById('nextButton').onclick = function () {
                        //    nextPrev(1);
                        //}
                        //document.getElementById('prevButton').onclick = function(){
                        //    nextPrev(-1);
                        //};

                    }).catch(function (error) {
                        console.log('Error:', error);
                    });
                }
            } else if (currentPage === 2) {
                console.log(currentPage)
                var isvalidInput = inputValidation();
                if (isvalidInput) {
                    phoneNumberValidation().then(function () {
                        // Reset the button text to "Next" for other pages
                        document.getElementById('nextButton').innerText = 'Done';
                        document.getElementById('prevButton').style.display = 'block';
                        // Reset the onclick event to the original function for other pages
                        //document.getElementById('nextButton').onclick = function () {
                        //    nextPrev(1);
                        //}
                        // Redirect to the Index page when the "Done" button is clicked
                        
                        //document.getElementById('prevButton').onclick = function(){
                        //    nextPrev(-1);
                        //}
                    }).catch(function (error) {
                        console.log('Error:', error);
                    });
                }
            } else {
                console.log('else')
                var isvalidInput = inputValidation();
                if (isvalidInput) {
                    console.log('else valid')
                    phoneNumberValidation().then(function () {
                        // Reset the button text to "Next" for other pages
                        document.getElementById('nextButton').innerText = 'Next';
                        // Reset the onclick event to the original function for other pages
                        document.getElementById('nextButton').onclick = function () {
                            nextPrev(1);
                        };
                        // Show the buttons for other pages
                        document.getElementById('prevButton').style.display = 'block';
                        document.getElementById('nextButton').style.display = 'block';
                    }).catch(function (error) {
                        console.log('Error:', error);
                    });
                }
            }

            console.log(currentPage)
            var isvalidInput = inputValidation();
            if (isvalidInput) {
                console.log('out valid')
                phoneNumberValidation().then(function () {
                    console.log('out valid2')
                    //// Perform your existing logic for updating the current step
                    if (currentPage < 0) {
                        currentPage = 0;
                    } else if (currentPage >= formSteps.length) {
                        currentPage = formSteps.length - 1;
                    }

                    // Update the step and show the corresponding content
                    showStep(currentPage);
                }).catch(function (error) {
                    console.log('Error:', error);
                });
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Get the error message from ViewData
            const statusMsg = '@ViewData["status"]';

            // Check if errorMsg is not null or empty
            if (statusMsg && statusMsg.trim() === "failed") {
                // If error message is present, show step 2
                document.getElementById('nextButton').innerText = 'Confirm';
                document.getElementById('amountMsg').innerHTML = 'Your account have insufficient balance';
                speakAmountError();
                currentPage = 1;
                showStep(1);
            } 
            else if (statusMsg.trim() === "success") {
                speakConfirmation();
                document.getElementById('nextButton').innerText = 'Done';
                window.location.href = '/VisuallyImpaired/Index';
                currentPage = 2;
                showStep(2);
            }
            else{
                showStep(0);
            }
        });

        function searchPhoneNumber() {
            const phoneNumber = document.getElementById('mobileNumber').value;

            if (phoneNumber.length >= 4) {
                $.ajax({
                    type: 'GET',
                    url: '/VisuallyImpaired/SearchPhoneNumber',
                    data: { phoneNumber: phoneNumber },
                    success: function (data) {
                        const recipientTableBody = document.getElementById('recipientTableBody');
                        const tableHeader = document.getElementById('tableHeader');

                        // Clear previous table rows
                        recipientTableBody.innerHTML = '';

                        if (data && data.length > 0) {
                            tableHeader.removeAttribute('hidden');
                            data.forEach(user => {
                                const row = document.createElement('tr'); // Create a new table row

                                // Create table data cells for name and phone number
                                const nameCell = document.createElement('td');
                                nameCell.textContent = user.name;
                                row.appendChild(nameCell);

                                const phoneNumberCell = document.createElement('td');
                                phoneNumberCell.textContent = user.phoneNumber;
                                row.appendChild(phoneNumberCell);

                                // Add click event to table row for selection
                                row.addEventListener('click', function () {
                                    // Remove 'selected' class from all rows
                                    const rows = recipientTableBody.getElementsByTagName('tr');
                                    for (const r of rows) {
                                        r.classList.remove('selected');
                                    }

                                    // Add 'selected' class to the clicked row
                                    row.classList.add('selected');

                                    // Set values for mobileNumber and reviewTransferTo
                                    document.getElementById('mobileNumber').value = user.phoneNumber;
                                    document.getElementById('reviewTransferTo').textContent = user.name;

                                    // Clear the table by setting its inner HTML to an empty string
                                    recipientTableBody.innerHTML = '';

                                    // Hide the table header after clearing the results
                                    tableHeader.setAttribute('hidden', true);
                                });

                                recipientTableBody.appendChild(row); // Append the row to the table body
                            });
                        } else {
                            tableHeader.setAttribute('hidden', true);
                            const row = document.createElement('tr');
                            const cell = document.createElement('td');
                            cell.setAttribute('colspan', '2'); // Span across both columns
                            cell.textContent = 'No users found';
                            row.appendChild(cell);
                            recipientTableBody.appendChild(row);
                        }
                    },
                    error: function (error) {
                        console.error('Error:', error.responseText);
                    }
                });
            } 
            else {
                // Clear the table body if the input length is less than 4
                document.getElementById('recipientTableBody').innerHTML = '';

                // Hide the table header if input length is less than 4
                const tableHeader = document.getElementById('tableHeader');
                if (!tableHeader.hasAttribute('hidden')) {
                    tableHeader.setAttribute('hidden', true);
                }
            }
        }

        // Attach an event listener to the 'mobileNumber' input field to detect input changes
        document.getElementById('mobileNumber').addEventListener('input', function () {
            searchPhoneNumber();

            // Get the current value of the mobileNumber input field
            const phoneNumber = this.value;

            // If the length of phoneNumber is less than 4, immediately empty the reviewTransferTo element
            if (phoneNumber.length < 8) {
                document.getElementById('reviewTransferTo').textContent = '';
            } 
        });


        document.getElementById('amount').addEventListener('input', function () {
            if (this.value === '' || parseFloat(this.value) < 1) {
                this.value = '1';
            }
        });

    </script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="~/js/search.js" asp-append-version="true"></script>
    <script src="~/js/annyang-setup.js" asp-append-version="true"></script>
</body>

</html>

<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,1,0" />

    <style>



        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Poppins", sans-serif;
        }

        .chatbot-toggler {
            position: fixed;
            bottom: 30px;
            right: 35px;
            outline: none;
            border: none;
            height: 50px;
            width: 50px;
            display: flex;
            cursor: pointer;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background: #724ae8;
            transition: all 0.2s ease;
        }

        body.show-chatbot .chatbot-toggler {
            transform: rotate(90deg);
        }

        .chatbot-toggler span {
            color: #fff;
            position: absolute;
        }

            .chatbot-toggler span:last-child,
            body.show-chatbot .chatbot-toggler span:first-child {
                opacity: 0;
            }

        body.show-chatbot .chatbot-toggler span:last-child {
            opacity: 1;
        }

        .chatbot {
            position: fixed;
            right: 35px;
            bottom: 90px;
            width: 420px;
            background: #fff;
            border-radius: 15px;
            overflow: hidden;
            opacity: 0;
            pointer-events: none;
            transform: scale(0.5);
            transform-origin: bottom right;
            box-shadow: 0 0 128px 0 rgba(0, 0, 0, 0.1), 0 32px 64px -48px rgba(0, 0, 0, 0.5);
            transition: all 0.1s ease;
        }

        body.show-chatbot .chatbot {
            opacity: 1;
            pointer-events: auto;
            transform: scale(1);
        }

        .chatbot header {
            padding: 16px 0;
            position: relative;
            text-align: center;
            color: #fff;
            background: #724ae8;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

            .chatbot header span {
                position: absolute;
                right: 15px;
                top: 50%;
                display: none;
                cursor: pointer;
                transform: translateY(-50%);
            }

        header h2 {
            font-size: 1.4rem;
        }

        .chatbot .chatbox {
            overflow-y: auto;
            height: 400px;
            padding: 30px 20px 60px;
        }

        .chatbot :where(.chatbox, textarea)::-webkit-scrollbar {
            width: 6px;
        }

        .chatbot :where(.chatbox, textarea)::-webkit-scrollbar-track {
            background: #fff;
            border-radius: 25px;
        }

        .chatbot :where(.chatbox, textarea)::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 25px;
        }

        .chatbox .chat {
            display: flex;
            list-style: none;
        }

        .chatbox .outgoing {
            margin: 20px 0;
            justify-content: flex-end;
        }

        .chatbox {
            overflow-y: auto;
            height: 250px;
            padding: 100px 20px 20px;
        }

            .chatbox .incoming span {
                width: 32px;
                height: 32px;
                color: #fff;
                cursor: default;
                text-align: center;
                line-height: 32px;
                align-self: flex-start;
                background: #724ae8;
                border-radius: 4px;
                margin: 0 10px 7px 0;
            }

            .chatbox .chat p {
                white-space: pre-wrap;
                padding: 12px 16px;
                border-radius: 10px 10px 0 10px;
                max-width: 75%;
                color: #000000;
                font-size: 1rem;
                background: #ececec;
            }


        .chat-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .voice-command-btn,
        .keyboard-shortcut-btn {
            padding: 5px 12px;
            background-color: #724ae8;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }


        .voice-command-btn {
            margin-right: 8px;
        }

            .voice-command-btn:hover,
            .keyboard-shortcut-btn:hover {
                background-color: #94bdfa;
            }

        .chatbox .incoming span {
            width: 32px;
            height: 32px;
            color: #fff;
            cursor: default;
            text-align: center;
            line-height: 32px;
            align-self: flex-start;
            background: #724ae8;
            border-radius: 4px;
            margin-top: 30px;
        }

        .chatbox .incoming p {
            padding: 12px 16px;
            border-radius: 10px 10px 0 10px;
            max-width: 75%;
            color: #000000;
            font-size: 0.95rem;
            background: #ececec;
            margin-top: 30px;
        }

        .chatbox .incoming .generated-textbox {
            font-size: 1.5rem;
            text-align: left;
        }
    </style>

</head>
<body>
    <button class="chatbot-toggler">
        <span class="material-symbols-rounded">mode_comment</span>
        <span class="material-symbols-outlined">close</span>
    </button>
    <div class="chatbot">
        <header>
            <h2>Chatbot</h2>
            <span class="close-btn material-symbols-outlined">close</span>
        </header>
        <ul class="chatbox">
            <li class="chat incoming">
                <span class="material-symbols-outlined">smart_toy</span>
                <p>Hi there 👋<br>How can I help you today?</p>
            </li>

            <li class="chat incoming" id="buttons-container">
                <div class="chat-buttons">
                    <button class="voice-command-btn">Voice Commands</button>
                    <button class="keyboard-shortcut-btn">Keyboard Shortcuts</button>
                </div>
            </li>
        </ul>
    </div>

    <script>

        const chatbotToggler = document.querySelector(".chatbot-toggler");
        const closeBtn = document.querySelector(".close-btn");
        const chatbox = document.querySelector(".chatbox");
        const voiceCommandBtn = document.querySelector(".voice-command-btn");
        const keyboardShortcutBtn = document.querySelector(".keyboard-shortcut-btn");

        const createChatLi = (message, className) => {
            const chatLi = document.createElement("li");
            chatLi.classList.add("chat", `${className}`);

            let chatContent = className === "outgoing" ? `<p class="generated-textbox"></p>` : `<span class="material-symbols-outlined">smart_toy</span><p class="generated-textbox"></p>`;
            chatLi.innerHTML = chatContent;
            chatLi.querySelector(".generated-textbox").innerHTML = message;
            return chatLi;
        }

        const handleButtonClick = (buttonType) => {
            const existingVoiceCommandList = document.querySelector(".voice-command-list");
            const existingKeyboardShortcutList = document.querySelector(".keyboard-shortcut-list");

            if (existingVoiceCommandList) {
                existingVoiceCommandList.remove();
            }

            if (existingKeyboardShortcutList) {
                existingKeyboardShortcutList.remove();
            }

            if (buttonType === "voice-command") {
                const voiceCommands = `
1.Go to login page - Brings you to login page

2.Go to home page - Brings you to Home page

3.Go to card activation - Brings you to card activation page

4.Access code (Code) - Enter your Access code

5.Pin number (PIN) - Enter your Pin number

6.Login - Logs you in

7.Logout - Logs you out

8.Search - Brings you to search feature

9.Type in - Types in what you say

10.Go to payment page - Brings you to the payment page

11.Enter - Enters your search

12.Next - Clicks the next button for you

13.Skip - Clicks the skip button for you

14.Increase font size - Increases font size

15.Decrease font size - Decreases font size

16.Toggle dark mode - Enables dark mode

17.Help - clicks on chatbot

18.Voice command - displays the voice commands

19.Keyboard - displays keyboard shortcuts

                              `;
                const chatLi = createChatLi(voiceCommands, "incoming");
                chatLi.classList.add("voice-command-list");
                chatbox.appendChild(chatLi);
                addButtons();
            } else if (buttonType === "keyboard-shortcut") {
                const keyboardShortcutMessage = "Hold Control_ Activate voice recognition";
                const chatLi = createChatLi(keyboardShortcutMessage, "incoming");
                chatLi.classList.add("keyboard-shortcut-list");
                chatbox.appendChild(chatLi);
                addButtons();
            }


            chatbox.scrollTop = chatbox.scrollHeight;
        }

        const addButtons = () => {
            const buttonsContainer = document.querySelector(".chatbox");
            if (buttonsContainer) {

                const existingButtons = document.querySelector(".chat-buttons");
                if (existingButtons) {
                    existingButtons.remove();
                }

                const chatButtons = document.createElement("div");
                chatButtons.classList.add("chat-buttons");
                chatButtons.innerHTML = `
                              <button class="voice-command-btn">Voice Commands</button>
                              <button class="keyboard-shortcut-btn">Keyboard Shortcuts</button>
                            `;
                buttonsContainer.appendChild(chatButtons);
            }
        }

        document.addEventListener("click", (event) => {
            const target = event.target;
            if (target.classList.contains("voice-command-btn")) {
                handleButtonClick("voice-command");
            } else if (target.classList.contains("keyboard-shortcut-btn")) {
                handleButtonClick("keyboard-shortcut");
            }
        });

        closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));
        chatbotToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));
    </script>
</body>
</html>

