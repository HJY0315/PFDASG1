@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model List<PFDASG1.Models.Pages>

<!DOCTYPE html>
<html>
<head>
    <!-- Use Unicode character encoding - multi-language compatibility -->
    <meta charset="utf-8">

    <!-- Set the initial view zooming scale for mobile devices -->
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>OCBC - Search</title>

    <!-- Reference to customized styling for this website -->
    <link rel="stylesheet" type="text/css" href="~/css/search.css">

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

    <!-- Bootstrap JavaScript (Popper.js is required for dropdowns) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script src="//cdnjs.cloudflare.com/ajax/libs/annyang/2.6.0/annyang.min.js"></script>

    @{
        // Check if Context and Session are not null
        var fontSize = Context?.Session?.GetInt32("FontSize") ?? 20;
    }

    <style>
        body {
            font-size: @(fontSize)px;
        }
    </style>
</head>

<body>
    <header>
        <partial name="_navbar" />
    </header>

    <section hidden id="search_result" style="padding-bottom:30px">
        <fieldset class="FormContent">
            <legend>Search result</legend>
            <div class="flex">
                <div class="flex-column" id="column1"></div>
                <div class="flex-column" id="column2"></div>
                <div class="flex-column" id="column3"></div>
            </div>
        </fieldset>
    </section>

    <fieldset class="FormContent" id="search_pfeature">
        <legend class="search-text">Popular features</legend>
        <div class="flex">
            <div class="flex-column">
                <p class="search-text"><b>Banking for Individual</b></p>
                <li class="flex-item"><a href="#">FRANK by OCBC</a></li>
                <li class="flex-item"><a href="#">Personal Banking</a></li>
                <li class="flex-item"><a href="#">Premier Banking</a></li>
                <li class="flex-item"><a href="#">Premier Private Client</a></li>
            </div>
            <div class="flex-column">
                <p class="search-text"><b>Banking for Businesses</b></p>
                <li class="flex-item"><a href="#">Business Banking</a></li>
                <li class="flex-item"><a href="#">Large Corporates</a></li>
            </div>
            <div class="flex-column">
                <p class="search-text"><b>OCBC Group</b></p>
                <li class="flex-item"><a href="#">About us</a></li>
                <li class="flex-item"><a href="#">Sustainability</a></li>
                <li class="flex-item"><a href="#">Careers</a></li>
                <li class="flex-item"><a href="#">Investors</a></li>
            </div>
        </div>
    </fieldset>

    <!-- Your existing script for annyang setup -->
    <script src="~/js/annyang-setup.js" asp-append-version="true"></script>

    <script>
        // Keep user focus stay on the search bar
        window.addEventListener('load', function () {
            const searchInput = document.getElementById('search');
            if (searchInput) {
                searchInput.focus();
            }
        });

        const searchResults = @Html.Raw(Json.Serialize(Model));
        console.log(searchResults);

        function populateColumns(results) {
            const resultSection = document.querySelector('#search_result');
            const columns = resultSection.querySelectorAll('.flex-column');

            columns.forEach(column => {
                column.innerHTML = '';
            });

            results.slice(0, columns.length * 4).forEach((result, index) => {
                const columnIndex = index % columns.length;
                const listItem = document.createElement('li');
                listItem.className = 'flex-item';
                const link = document.createElement('a');
                link.href = result.url;
                link.textContent = result.pageTitle;
                listItem.appendChild(link);

                columns[columnIndex].appendChild(listItem);

                // Speak out the result
                const resultNumber = getOrdinalNumber(index + 1);
                speakResponse(`${resultNumber} result is: ${result.pageTitle}`);
            });

            resultSection.removeAttribute('hidden');
        }


        function getOrdinalNumber(number) {
            const suffixes = ['th', 'st', 'nd', 'rd'];
            const relevantDigits = (number < 30) ? number % 20 : number % 10;
            const suffix = (relevantDigits <= 3) ? suffixes[relevantDigits] : suffixes[0];
            return `${number}${suffix}`;
        }

        // Additional code from your previous message (if any)

        function handleSearch() {
            const searchTerm = document.getElementById('search').value.trim().toLowerCase(); // trim() gets rid of spaces at both ends of the string

            if (searchTerm === '') {
                // If the search bar is blank, hide the results section
                const resultSection = document.querySelector('#search_result');
                resultSection.setAttribute('hidden', 'true');
            } else {
                // If there is a search term, filter and display relevant results
                const searchWords = searchTerm.split(' ');

                const filteredResults = searchResults.filter(result => {
                    const resultTitleLower = result.pageTitle.toLowerCase();
                    return searchWords.every(word => resultTitleLower.includes(word));
                });

                populateColumns(filteredResults);
            }
        }

        document.getElementById('search').addEventListener('input', handleSearch);

        function handleSpeechToText(input) {
            document.getElementById('search').value = input;
            const inputEvent = new Event('input', { bubbles: true });
            document.getElementById('search').dispatchEvent(inputEvent);
        }

        // For focus the user onto the result section
        document.getElementById('search').addEventListener('keypress', function (event) {
            if (event.key === 'Enter') {
                const resultSection = document.getElementById('search_result');
                if (resultSection) {
                    resultSection.tabIndex = -1;
                    resultSection.focus();
                }
            }
        });
    </script>

    <!-- Your existing site.js script -->
    <script src="~/js/site.js" asp-append-version="true"></script>

</body>
</html>

<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,1,0" />

    <style>



        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Poppins", sans-serif;
        }

        .chatbot-toggler {
            position: fixed;
            bottom: 30px;
            right: 35px;
            outline: none;
            border: none;
            height: 50px;
            width: 50px;
            display: flex;
            cursor: pointer;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background: #724ae8;
            transition: all 0.2s ease;
        }

        body.show-chatbot .chatbot-toggler {
            transform: rotate(90deg);
        }

        .chatbot-toggler span {
            color: #fff;
            position: absolute;
        }

            .chatbot-toggler span:last-child,
            body.show-chatbot .chatbot-toggler span:first-child {
                opacity: 0;
            }

        body.show-chatbot .chatbot-toggler span:last-child {
            opacity: 1;
        }

        .chatbot {
            position: fixed;
            right: 35px;
            bottom: 90px;
            width: 420px;
            background: #fff;
            border-radius: 15px;
            overflow: hidden;
            opacity: 0;
            pointer-events: none;
            transform: scale(0.5);
            transform-origin: bottom right;
            box-shadow: 0 0 128px 0 rgba(0, 0, 0, 0.1), 0 32px 64px -48px rgba(0, 0, 0, 0.5);
            transition: all 0.1s ease;
        }

        body.show-chatbot .chatbot {
            opacity: 1;
            pointer-events: auto;
            transform: scale(1);
        }

        .chatbot header {
            padding: 16px 0;
            position: relative;
            text-align: center;
            color: #fff;
            background: #724ae8;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

            .chatbot header span {
                position: absolute;
                right: 15px;
                top: 50%;
                display: none;
                cursor: pointer;
                transform: translateY(-50%);
            }

        header h2 {
            font-size: 1.4rem;
        }

        .chatbot .chatbox {
            overflow-y: auto;
            height: 400px;
            padding: 30px 20px 60px;
        }

        .chatbot :where(.chatbox, textarea)::-webkit-scrollbar {
            width: 6px;
        }

        .chatbot :where(.chatbox, textarea)::-webkit-scrollbar-track {
            background: #fff;
            border-radius: 25px;
        }

        .chatbot :where(.chatbox, textarea)::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 25px;
        }

        .chatbox .chat {
            display: flex;
            list-style: none;
        }

        .chatbox .outgoing {
            margin: 20px 0;
            justify-content: flex-end;
        }

        .chatbox {
            overflow-y: auto;
            height: 250px;
            padding: 100px 20px 20px;
        }

            .chatbox .incoming span {
                width: 32px;
                height: 32px;
                color: #fff;
                cursor: default;
                text-align: center;
                line-height: 32px;
                align-self: flex-start;
                background: #724ae8;
                border-radius: 4px;
                margin: 0 10px 7px 0;
            }

            .chatbox .chat p {
                white-space: pre-wrap;
                padding: 12px 16px;
                border-radius: 10px 10px 0 10px;
                max-width: 75%;
                color: #000000;
                font-size: 1rem;
                background: #ececec;
            }


        .chat-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .voice-command-btn,
        .keyboard-shortcut-btn {
            padding: 5px 12px;
            background-color: #724ae8;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }


        .voice-command-btn {
            margin-right: 8px;
        }

            .voice-command-btn:hover,
            .keyboard-shortcut-btn:hover {
                background-color: #94bdfa;
            }

        .chatbox .incoming span {
            width: 32px;
            height: 32px;
            color: #fff;
            cursor: default;
            text-align: center;
            line-height: 32px;
            align-self: flex-start;
            background: #724ae8;
            border-radius: 4px;
            margin-top: 30px;
        }

        .chatbox .incoming p {
            padding: 12px 16px;
            border-radius: 10px 10px 0 10px;
            max-width: 75%;
            color: #000000;
            font-size: 0.95rem;
            background: #ececec;
            margin-top: 30px;
        }

        .chatbox .incoming .generated-textbox {
            font-size: 1.5rem;
            text-align: left;
        }
    </style>

</head>
<body>
    <button class="chatbot-toggler">
        <span class="material-symbols-rounded">mode_comment</span>
        <span class="material-symbols-outlined">close</span>
    </button>
    <div class="chatbot">
        <header>
            <h2>Chatbot</h2>
            <span class="close-btn material-symbols-outlined">close</span>
        </header>
        <ul class="chatbox">
            <li class="chat incoming">
                <span class="material-symbols-outlined">smart_toy</span>
                <p>Hi there 👋<br>How can I help you today?</p>
            </li>

            <li class="chat incoming" id="buttons-container">
                <div class="chat-buttons">
                    <button class="voice-command-btn">Voice Commands</button>
                    <button class="keyboard-shortcut-btn">Keyboard Shortcuts</button>
                </div>
            </li>
        </ul>
    </div>

    <script>

        const chatbotToggler = document.querySelector(".chatbot-toggler");
        const closeBtn = document.querySelector(".close-btn");
        const chatbox = document.querySelector(".chatbox");
        const voiceCommandBtn = document.querySelector(".voice-command-btn");
        const keyboardShortcutBtn = document.querySelector(".keyboard-shortcut-btn");

        const createChatLi = (message, className) => {
            const chatLi = document.createElement("li");
            chatLi.classList.add("chat", `${className}`);

            let chatContent = className === "outgoing" ? `<p class="generated-textbox"></p>` : `<span class="material-symbols-outlined">smart_toy</span><p class="generated-textbox"></p>`;
            chatLi.innerHTML = chatContent;
            chatLi.querySelector(".generated-textbox").innerHTML = message;
            return chatLi;
        }

        const handleButtonClick = (buttonType) => {
            const existingVoiceCommandList = document.querySelector(".voice-command-list");
            const existingKeyboardShortcutList = document.querySelector(".keyboard-shortcut-list");

            if (existingVoiceCommandList) {
                existingVoiceCommandList.remove();
            }

            if (existingKeyboardShortcutList) {
                existingKeyboardShortcutList.remove();
            }

            if (buttonType === "voice-command") {
                const voiceCommands = `
1.Go to login page - Brings you to login page

2.Go to home page - Brings you to Home page

3.Go to card activation - Brings you to card activation page

4.Access code (Code) - Enter your Access code

5.Pin number (PIN) - Enter your Pin number

6.Login - Logs you in

7.Logout - Logs you out

8.Search - Brings you to search feature

9.Type in - Types in what you say

10.Go to payment page - Brings you to the payment page

11.Enter - Enters your search

12.Next - Clicks the next button for you

13.Skip - Clicks the skip button for you

14.Increase font size - Increases font size

15.Decrease font size - Decreases font size

16.Toggle dark mode - Enables dark mode

17.Help - clicks on chatbot

18.Voice command - displays the voice commands

19.Keyboard - displays keyboard shortcuts
                              `;
                const chatLi = createChatLi(voiceCommands, "incoming");
                chatLi.classList.add("voice-command-list");
                chatbox.appendChild(chatLi);
                addButtons();
            } else if (buttonType === "keyboard-shortcut") {
                const keyboardShortcutMessage = "Hold Control_ Activate voice recognition";
                const chatLi = createChatLi(keyboardShortcutMessage, "incoming");
                chatLi.classList.add("keyboard-shortcut-list");
                chatbox.appendChild(chatLi);
                addButtons();
            }


            chatbox.scrollTop = chatbox.scrollHeight;
        }

        const addButtons = () => {
            const buttonsContainer = document.querySelector(".chatbox");
            if (buttonsContainer) {

                const existingButtons = document.querySelector(".chat-buttons");
                if (existingButtons) {
                    existingButtons.remove();
                }

                const chatButtons = document.createElement("div");
                chatButtons.classList.add("chat-buttons");
                chatButtons.innerHTML = `
                              <button class="voice-command-btn">Voice Commands</button>
                              <button class="keyboard-shortcut-btn">Keyboard Shortcuts</button>
                            `;
                buttonsContainer.appendChild(chatButtons);
            }
        }

        document.addEventListener("click", (event) => {
            const target = event.target;
            if (target.classList.contains("voice-command-btn")) {
                handleButtonClick("voice-command");
            } else if (target.classList.contains("keyboard-shortcut-btn")) {
                handleButtonClick("keyboard-shortcut");
            }
        });

        closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));
        chatbotToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));
    </script>
</body>
</html>
