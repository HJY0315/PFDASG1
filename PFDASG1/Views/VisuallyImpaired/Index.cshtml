@model IEnumerable<PFDASG1.Models.Transactions>
@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor


@{
    
    int userid = 0;
    if (HttpContextAccessor.HttpContext != null)
    {
        userid = HttpContextAccessor.HttpContext.Session.GetInt32("id") ?? 0;
  
    }
    Layout = "~/Views/Shared/_Layout.cshtml";
    // Check if Context and Session are not null
    var fontSize = Context?.Session?.GetInt32("FontSize") ?? 20;
}

<!--
    Keyboard shortcut & Voice Command guide:
    1. Create a floating button for user to click.
    2. Ensure that the button has the keyboard icon.
    3. Click the button to display keyboard shortcut and voice command.
    4. Create few shortcuts key to tryout.
    5. Type out the remaining shortcuts.
    6. Done
-->

<!DOCTYPE html>
<html>
<head>
    <!-- Use Unicode character encoding - multi-language compatibility -->
    <meta charset="utf-8">

    <!-- Set the initial view zooming scale for mobile device -->
    <meta name="viewport" content="width = device-width,
 initial-scale = 1" />

    <title>OCBC - User Homepage</title>

    <!-- Reference to customized styling for this website -->
    @*<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />*@
    <link rel="stylesheet" type="text/css" href="~/css/site.css">
    
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdn.syncfusion.com/ej2/xx.x.x/dist/ej2.min.css" />


    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

    
    <!-- Bootstrap JavaScript (Popper.js is required for dropdowns) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script src="//cdnjs.cloudflare.com/ajax/libs/annyang/2.6.0/annyang.min.js"></script>

    @{
        // Check if Context and Session are not null
        //var fontSize = Context?.Session?.GetInt32("FontSize") ?? 20;
    }

    <style>
        body {
            font-size: @(fontSize)px;
        }
    </style>
</head>

<body>
    <header>
        <partial name="_navbar" />
    </header>

    @*Summary Widgets*@
    <div class="row mb-4">

        <div class="col-md-4">
            <div class="d-flex flex-row widget summary income">
                <div class="d-flex flex-column justify-content-center p-4">
                    <i class="fa fa-dollar" style="font-size:60px;color:green;text-shadow:2px 2px 4px #000000;"></i>
                </div>
                <div class="d-flex flex-column m-auto py-4">
                    <span class="lead">Monthly Income</span>
                    <p class="display-6 fw-bold">@ViewBag.totalBalance</p>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="d-flex flex-row widget summary expense">
                <div class="d-flex flex-column justify-content-center p-4">
                    <i class="fa fa-dollar" style="font-size:60px;color:red;text-shadow:2px 2px 4px #000000;"></i>
                </div>
                <div class="d-flex flex-column m-auto py-4">
                    <span class="lead">Monthly Expense</span>
                    <p class="display-6 fw-bold">@ViewBag.amountToSubtract</p>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="d-flex flex-row widget summary balance">
                <div class="d-flex flex-column justify-content-center p-4">
                    <i class="fa fa-dollar" style="font-size:60px;color:blue;text-shadow:2px 2px 4px #000000;"></i>
                </div>
                <div class="d-flex flex-column m-auto py-4">
                    <span class="lead">Balance</span>
                    <p class="display-6 fw-bold">@ViewBag.Balance</p>
                </div>
            </div>
        </div>
    </div>

    @*Doughnut and Spline Chart*@
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="widget chart">
                <div class="p-4">
                    <p class="fw-bold">Expense By Month</p>
                </div>
                <div>
                    <canvas id="doughnutChart"></canvas>
                </div>

            </div>
        </div>
        @*Recent Transactions and More*@
        <div class="col-md-7">
        <div class="widget chart">
            <div class="p-4">
                    <p class="fw-bold">Recent Transactions</p>
            </div>
                <div class="flex-table">
                    <div class="flex-header">
                        <button class="filter-btn active" data-filter="all" aria-pressed="true">All</button>
                        <button class="filter-btn" data-filter="expense" aria-pressed="false">Expense</button>
                        <button class="filter-btn" data-filter="income" aria-pressed="false">Income</button>
                    </div>
                    <div class="header">
                        <div class="flex-cell">Date</div>
                        <div class="flex-cell">Description</div>
                        <div class="flex-cell">Amount</div>
                    </div>

                    @foreach (var item in ViewBag.RecentTransactions)
                    {
                        <div class="flex-row" data-type="@(item.RecipientID == @userid ? "income" : "expense")">
                            @*<div class="flex-cell">@item.RecipientID == @userid ? "Income" : "Expense"</div>*@
                            <div class="flex-cell">@item.TransactionDate.Date.ToString("yyyy-MM-dd")</div>
                            <div class="flex-cell">@item.Description</div>
                            <div class="flex-cell" style="color: @(item.RecipientID == @userid ? "green" : "red"); font-weight:bold;">
                                @(item.RecipientID == @userid ? "+" : "-")@item.Amount.ToString("0.00")
                            </div>
                        </div>
                    }
                </div>
        </div>
    </div>
    </div>

    <footer>
        <p>&copy; Please do not share or download your information.</p>
    </footer>

    <script>
            document.addEventListener("DOMContentLoaded", function () {
                // Get data from ViewBag.DoughnutChartData
                var chartData = @Html.Raw(Json.Serialize(ViewBag.DoughnutChartData));

                // Extract labels and data from the chartData
                var labels = chartData.map(function (item) {
                    // Use moment.js for date formatting
                    return item.stringDate;
                });

                var data = chartData.map(function (item) {
                    return item.amount;
                });

                // Create the doughnut chart
                var ctx = document.getElementById("doughnutChart").getContext("2d");
                var doughnutChart = new Chart(ctx, {
                    type: "doughnut",
                    data: {
                        labels: labels,
                        datasets: [{
                            data: data,
                            backgroundColor: ["#0e8d76", "#a4b219", "#cb9b00", "#8a442c", "#0454b5", "#7d0a0a", "#822690", "#4c2090", "#313e93", "#0096ac"]
                        }]
                    },
                    options: {
                        legend: {
                            display: false
                        }
                    }
                });
            });


        const filterButtons = document.querySelectorAll('.filter-btn');
        const rowsToFilter = document.querySelectorAll('.flex-row');
        filterButtons.forEach(button => {
            button.addEventListener('click', () => {
                filterButtons.forEach(btn => {
                    btn.classList.remove('active');
                    btn.setAttribute('aria-pressed', 'false');
                });
                button.classList.add('active');
                button.setAttribute('aria-pressed', 'true');
                const filterValue = button.getAttribute('data-filter');
                rowsToFilter.forEach(row => {
                    const rowType = row.getAttribute('data-type');
                    if (filterValue === 'all') {
                        row.style.display = 'flex';
                    } else {
                        row.style.display = rowType === filterValue ? 'flex' : 'none';
                    }
                });
            });
        });
    </script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="~/js/search.js" asp-append-version="true"></script>
    <script src="~/js/annyang-setup.js" asp-append-version="true"></script>
    <script src="https://cdn.syncfusion.com/ej2/xx.x.x/dist/ej2.min.js"></script>

</body>
</html>

<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,1,0" />

    <style>



        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Poppins", sans-serif;
        }

        .chatbot-toggler {
            position: fixed;
            bottom: 30px;
            right: 35px;
            outline: none;
            border: none;
            height: 50px;
            width: 50px;
            display: flex;
            cursor: pointer;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background: #724ae8;
            transition: all 0.2s ease;
        }

        body.show-chatbot .chatbot-toggler {
            transform: rotate(90deg);
        }

        .chatbot-toggler span {
            color: #fff;
            position: absolute;
        }

            .chatbot-toggler span:last-child,
            body.show-chatbot .chatbot-toggler span:first-child {
                opacity: 0;
            }

        body.show-chatbot .chatbot-toggler span:last-child {
            opacity: 1;
        }

        .chatbot {
            position: fixed;
            right: 35px;
            bottom: 90px;
            width: 420px;
            background: #fff;
            border-radius: 15px;
            overflow: hidden;
            opacity: 0;
            pointer-events: none;
            transform: scale(0.5);
            transform-origin: bottom right;
            box-shadow: 0 0 128px 0 rgba(0, 0, 0, 0.1), 0 32px 64px -48px rgba(0, 0, 0, 0.5);
            transition: all 0.1s ease;
        }

        body.show-chatbot .chatbot {
            opacity: 1;
            pointer-events: auto;
            transform: scale(1);
        }

        .chatbot header {
            padding: 16px 0;
            position: relative;
            text-align: center;
            color: #fff;
            background: #724ae8;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

            .chatbot header span {
                position: absolute;
                right: 15px;
                top: 50%;
                display: none;
                cursor: pointer;
                transform: translateY(-50%);
            }

        header h2 {
            font-size: 1.4rem;
        }

        .chatbot .chatbox {
            overflow-y: auto;
            height: 350px;
            padding: 30px 20px 60px;
        }

        .chatbot :where(.chatbox, textarea)::-webkit-scrollbar {
            width: 6px;
        }

        .chatbot :where(.chatbox, textarea)::-webkit-scrollbar-track {
            background: #fff;
            border-radius: 25px;
        }

        .chatbot :where(.chatbox, textarea)::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 25px;
        }

        .chatbox .chat {
            display: flex;
            list-style: none;
        }

        .chatbox .outgoing {
            margin: 20px 0;
            justify-content: flex-end;
        }

        .chatbox {
            overflow-y: auto;
            height: 250px;
            padding: 100px 20px 20px;
        }

            .chatbox .incoming span {
                width: 32px;
                height: 32px;
                color: #fff;
                cursor: default;
                text-align: center;
                line-height: 32px;
                align-self: flex-start;
                background: #724ae8;
                border-radius: 4px;
                margin: 0 10px 7px 0;
            }

            .chatbox .chat p {
                white-space: pre-wrap;
                padding: 12px 16px;
                border-radius: 10px 10px 0 10px;
                max-width: 75%;
                color: #000000;
                font-size: 1rem;
                background: #ececec;
            }


        .chat-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .voice-command-btn,
        .keyboard-shortcut-btn {
            padding: 5px 12px;
            background-color: #724ae8;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }


        .voice-command-btn {
            margin-right: 8px;
        }

            .voice-command-btn:hover,
            .keyboard-shortcut-btn:hover {
                background-color: #94bdfa;
            }

        .chatbox .incoming span {
            width: 32px;
            height: 32px;
            color: #fff;
            cursor: default;
            text-align: center;
            line-height: 32px;
            align-self: flex-start;
            background: #724ae8;
            border-radius: 4px;
            margin-top: 30px;
        }

        .chatbox .incoming p {
            padding: 12px 16px;
            border-radius: 10px 10px 0 10px;
            max-width: 75%;
            color: #000000;
            font-size: 0.95rem;
            background: #ececec;
            margin-top: 30px;
        }

        .chatbox .incoming .generated-textbox {
            font-size: 1.5rem;
            text-align: left;
        }
    </style>

</head>
<body>
    <button class="chatbot-toggler">
        <span class="material-symbols-rounded">mode_comment</span>
        <span class="material-symbols-outlined">close</span>
    </button>
    <div class="chatbot">
        <header>
            <h2>Chatbot</h2>
            <span class="close-btn material-symbols-outlined">close</span>
        </header>
        <ul class="chatbox">
            <li class="chat incoming">
                <span class="material-symbols-outlined">smart_toy</span>
                <p>Hi there 👋<br>How can I help you today?</p>
            </li>

            <li class="chat incoming" id="buttons-container">
                <div class="chat-buttons">
                    <button class="voice-command-btn">Voice Commands</button>
                    <button class="keyboard-shortcut-btn">Keyboard Shortcuts</button>
                </div>
            </li>
        </ul>
    </div>

    <script>

        const chatbotToggler = document.querySelector(".chatbot-toggler");
        const closeBtn = document.querySelector(".close-btn");
        const chatbox = document.querySelector(".chatbox");
        const voiceCommandBtn = document.querySelector(".voice-command-btn");
        const keyboardShortcutBtn = document.querySelector(".keyboard-shortcut-btn");

        const createChatLi = (message, className) => {
            const chatLi = document.createElement("li");
            chatLi.classList.add("chat", `${className}`);

            let chatContent = className === "outgoing" ? `<p class="generated-textbox"></p>` : `<span class="material-symbols-outlined">smart_toy</span><p class="generated-textbox"></p>`;
            chatLi.innerHTML = chatContent;
            chatLi.querySelector(".generated-textbox").innerHTML = message;
            return chatLi;
        }

        const handleButtonClick = (buttonType) => {
            const existingVoiceCommandList = document.querySelector(".voice-command-list");
            const existingKeyboardShortcutList = document.querySelector(".keyboard-shortcut-list");

            if (existingVoiceCommandList) {
                existingVoiceCommandList.remove();
            }

            if (existingKeyboardShortcutList) {
                existingKeyboardShortcutList.remove();
            }

            if (buttonType === "voice-command") {
                const voiceCommands = `
1.Go to login page - Brings you to login page

2.Go to home page - Brings you to Home page

3.Go to card activation - Brings you to card activation page

4.Access code (Code) - Enter your Access code

5.Pin number (PIN) - Enter your Pin number

6.Login - Logs you in

7.Logout - Logs you out

8.Search - Brings you to search feature

9.Type in - Types in what you say

10.Go to payment page - Brings you to the payment page

11.Enter - Enters your search

12.Next - Clicks the next button for you

13.Skip - Clicks the skip button for you

14.Increase font size - Increases font size

15.Decrease font size - Decreases font size

16.Toggle dark mode - Enables dark mode

17.Help - clicks on chatbot

18.Voice command - displays the voice commands

19.Keyboard - displays keyboard shortcuts

                              `;
                const chatLi = createChatLi(voiceCommands, "incoming");
                chatLi.classList.add("voice-command-list");
                chatbox.appendChild(chatLi);
                addButtons();
            } else if (buttonType === "keyboard-shortcut") {
                const keyboardShortcutMessage = "Command 1 - Your keyboard shortcut message here";
                const chatLi = createChatLi(keyboardShortcutMessage, "incoming");
                chatLi.classList.add("keyboard-shortcut-list");
                chatbox.appendChild(chatLi);
                addButtons();
            }


            chatbox.scrollTop = chatbox.scrollHeight;
        }

        const addButtons = () => {
            const buttonsContainer = document.querySelector(".chatbox");
            if (buttonsContainer) {

                const existingButtons = document.querySelector(".chat-buttons");
                if (existingButtons) {
                    existingButtons.remove();
                }

                const chatButtons = document.createElement("div");
                chatButtons.classList.add("chat-buttons");
                chatButtons.innerHTML = `
                              <button class="voice-command-btn">Voice Commands</button>
                              <button class="keyboard-shortcut-btn">Keyboard Shortcuts</button>
                            `;
                buttonsContainer.appendChild(chatButtons);
            }
        }

        document.addEventListener("click", (event) => {
            const target = event.target;
            if (target.classList.contains("voice-command-btn")) {
                handleButtonClick("voice-command");
            } else if (target.classList.contains("keyboard-shortcut-btn")) {
                handleButtonClick("keyboard-shortcut");
            }
        });

        closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));
        chatbotToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));
    </script>
</body>
</html>

