@model IEnumerable<PFDASG1.Models.Transactions>
@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    int userid = 0;
    if (HttpContextAccessor.HttpContext != null)
    {
        userid = HttpContextAccessor.HttpContext.Session.GetInt32("id") ?? 0;
    }
    Layout = null;
}


<!DOCTYPE html>
<html>
<head>
    <!-- Use Unicode character encoding - multi-language compatibility -->
    <meta charset="utf-8">

    <!-- Set the initial view zooming scale for mobile device -->
    <meta name="viewport" content="width = device-width,
 initial-scale = 1" />

    <title>OCBC</title>

    <!-- Reference to customized styling for this website -->
    @*<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />*@
    <link rel="stylesheet" type="text/css" href="~/css/site.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

    <!-- Bootstrap JavaScript (Popper.js is required for dropdowns) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script src="//cdnjs.cloudflare.com/ajax/libs/annyang/2.6.0/annyang.min.js"></script>

</head>

<body>
    <header>
        @await Html.PartialAsync("_navbar.cshtml")
    </header>

        <div class="content-wrapper">
            <div class="total-balance">
            @if (Model != null)
            {
                decimal totalBalance = 0;

                // Add amounts for non-sender transactions
                foreach (var item in Model)
                {
                    if (item.SenderID != @userid)
                    {
                        totalBalance += item.Amount;
                    }
                }

                // Subtract amounts for sender transactions
                var senderTransactions = Model.Where(item => item.SenderID == @userid);
                decimal amountToSubtract = senderTransactions.Sum(item => item.Amount);
                totalBalance -= amountToSubtract;

                <h1 style="text-align:center;">Total Balance: $@totalBalance.ToString("0.00")</h1>
            }
            else
            {
                <p>No data available</p>
            }

            <canvas id="doughnutChart" style="width:350px; height:350px;"></canvas>
            </div>
            <div class="transaction-history">
                <fieldset class="FormContent">
                    <legend><b>Transaction History</b></legend>
                    <table class="flex">
                        <thead>
                            <tr>
                                <th>Transaction Date</th>
                                <th>Description</th>
                                <th>Amount</th>
                                <th>Receiver</th>
                                <th>Sender</th>
                            </tr>
                        </thead>
                    <tbody>
                        @if (Model != null)
                        {
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.TransactionDate</td>
                                    <td>@item.Description</td>
                                    <td>@(item.RecipientID == @userid ? "+" : "-")@item.Amount.ToString("0.00")</td>
                                    <td>@item.RecipientID</td>
                                    <td>@item.SenderID</td>
                                </tr>
                            }
                        }
                    </tbody>


                    </table>
                </fieldset>
            </div>
        </div>
    }

    <script>

        document.addEventListener("DOMContentLoaded", function () {
            // Fetch withdraw and deposit amounts from the database
            var withdrawAmount = getWithdrawAmountFromDatabase();
            var depositAmount = getDepositAmountFromDatabase();

            // Update the chart data
            var data = {
                labels: ["Withdraw", "Deposit"],
                datasets: [
                    {
                        data: [withdrawAmount, depositAmount],
                        backgroundColor: ["#2C3E50", "#FC4349"],
                    },
                ],
            };

            // Chart options
            var options = {
                responsive: false,
                maintainAspectRatio: true,
            };

            // Get the chart canvas and create the doughnut chart
            var ctx = document.getElementById("doughnutChart").getContext("2d");
            var myDoughnutChart = new Chart(ctx, {
                type: "doughnut",
                data: data,
                options: options,
            });

            // Get the center of the chart
            var centerX = ctx.canvas.width / 2;
            var centerY = ctx.canvas.height / 2;

            // Manually add text inside the chart
            ctx.font = "24px Arial";
            ctx.fillStyle = "#000";
            ctx.textAlign = "center";
            ctx.fillText(calculateTotalBalance().toFixed(2), centerX, centerY);
            ctx.font = "16px Arial";
            ctx.fillText("Total Balance", centerX, centerY + 30);
        });

        function getWithdrawAmountFromDatabase() {
            int userId = 0;

            if (HttpContextAccessor.HttpContext != null) {
                userId = HttpContextAccessor.HttpContext.Session.GetInt32("id") ?? 0;
            }

            // Establish database connection
            string strConn = Configuration.GetConnectionString("OCBCConnectionString");
            SqlConnection conn = new SqlConnection(strConn);

            try {
                conn.Open(); // Establish connection to the database

                string query = "SELECT SUM(Amount) AS totalWithdrawAmount FROM transactions WHERE SenderID = @userId AND Description LIKE '%withdraw%'"; // Example SQL query

                SqlCommand command = new SqlCommand(query, conn);

                SqlParameter userIdParameter = new SqlParameter("@userId", userId);
                command.Parameters.Add(userIdParameter); // Add parameter to the command

                SqlDataReader reader = command.ExecuteReader(); // Execute the query and retrieve results

                // Process the retrieved data
                var totalWithdrawAmount = 0;
                if (reader.Read()) {
                    totalWithdrawAmount = parseFloat(reader.GetString("totalWithdrawAmount"));
                }

                reader.Close(); // Close the reader object
                conn.Close(); // Close the connection to the database
                return totalWithdrawAmount;
            }
            catch (SqlException ex)
            {
                // Handle database-related errors
                return 0; // Replace with appropriate error handling
            }
        }






        function getDepositAmountFromDatabase() {
            //// Establish database connection
            // string strConn = Configuration.GetConnectionString("OCBCConnectionString");
            //conn = new SqlConnection(strConn);

            //// Write SQL query
            //var query = 'SELECT SUM(Amount) AS totalDepositAmount FROM transactions WHERE SenderID = @userId AND Description LIKE "%deposit%"';


            //var statement = conn.prepare(query);
            //statement.bind('@userId', @userId);
            //statement.execute();
            //var result = statement.get_result();

            //var totalDepositAmount = 0;
            //if (result.fetch_assoc()) {
            //    totalDepositAmount = parseFloat(result.fetch_assoc()['totalDepositAmount']);
            //}


            //// Close database connection
            //connection.close();

            //// Return total deposit amount
            //return totalDepositAmount;
        }

        function calculateTotalBalance() {
            // Calculate total balance based on withdraw and deposit amounts
            return withdrawAmount + depositAmount;
        }



        //document.addEventListener("DOMContentLoaded", function () {
        //    // Data for the chart
        //    var data = {
        //        labels: ["Withdraw","Deposit"],
        //        datasets: [
        //            {
                        
        //                data: [900, 100, 400, 200, 250], // Example account balances
        //                backgroundColor: ["#2C3E50", "#FC4349", "#6DBCDB", "#F7E248", "#D7DADB"],
        //            },
        //        ],
        //    };

        //    // Chart options
        //    var options = {
        //        responsive: false,
        //        maintainAspectRatio: true,
        //    };

        //    // Get the chart canvas and create the doughnut chart
        //    var ctx = document.getElementById("doughnutChart").getContext("2d");
        //    var myDoughnutChart = new Chart(ctx, {
        //        type: "doughnut",
        //        data: data,
        //        options: options,
        //    });

        //    // Get the center of the chart
        //    var centerX = ctx.canvas.width / 2;
        //    var centerY = ctx.canvas.height / 2;

        //    // Manually add text inside the chart
        //    ctx.font = "24px Arial";
        //    ctx.fillStyle = "#000";
        //    ctx.textAlign = "center";
        //    ctx.fillText("$18,000", centerX, centerY);
        //    ctx.font = "16px Arial";
        //    ctx.fillText("Total Balance", centerX, centerY + 30);
        //});
    </script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="~/js/search.js" asp-append-version="true"></script>
    <script src="~/js/annyang-setup.js" asp-append-version="true"></script>
</body>
</html>
